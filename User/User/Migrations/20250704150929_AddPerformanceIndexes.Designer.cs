// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using User.ApplicationDbContext;

#nullable disable

namespace User.Migrations
{
    [DbContext(typeof(DB))]
    [Migration("20250704150929_AddPerformanceIndexes")]
    partial class AddPerformanceIndexes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("User.Model.NewOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Accept")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AcceptAccount")
                        .HasColumnType("longtext");

                    b.Property<string>("AcceptCustomerService")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("JopID")
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("Town")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("numberOfLicense")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("statuOrder")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("step1")
                        .HasColumnType("longtext");

                    b.Property<string>("step2")
                        .HasColumnType("longtext");

                    b.Property<string>("step3")
                        .HasColumnType("longtext");

                    b.Property<string>("zipCode")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Accept")
                        .HasDatabaseName("IX_NewOrders_Accept");

                    b.HasIndex("Date")
                        .HasDatabaseName("IX_NewOrders_Date");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_NewOrders_UserId");

                    b.HasIndex("statuOrder")
                        .HasDatabaseName("IX_NewOrders_Status");

                    b.HasIndex("Accept", "statuOrder")
                        .HasDatabaseName("IX_NewOrders_Accept_Status");

                    b.HasIndex("UserId", "statuOrder")
                        .HasDatabaseName("IX_NewOrders_UserId_Status");

                    b.HasIndex("statuOrder", "Date")
                        .HasDatabaseName("IX_NewOrders_Status_Date");

                    b.ToTable("newOrders");
                });

            modelBuilder.Entity("User.Model.NotesAccounting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("UserID")
                        .HasColumnType("longtext");

                    b.Property<int?>("newOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("newOrderId");

                    b.ToTable("notesAccountings");
                });

            modelBuilder.Entity("User.Model.NotesCustomerService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("fileName")
                        .HasColumnType("longtext");

                    b.Property<string>("fileUrl")
                        .HasColumnType("longtext");

                    b.Property<int?>("newOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("newOrderId")
                        .HasDatabaseName("IX_NotesCustomerService_NewOrderId");

                    b.ToTable("notesCustomerServices");
                });

            modelBuilder.Entity("User.Model.NumberOfTypeOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasColumnType("longtext");

                    b.Property<float?>("Weight")
                        .HasColumnType("float");

                    b.Property<int?>("newOrderId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("typeOrder")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("newOrderId");

                    b.ToTable("typeOrders");
                });

            modelBuilder.Entity("User.Model.PaymentDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderId")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<string>("TransactionId")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("paymentDetails");
                });

            modelBuilder.Entity("User.Model.UploadFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("fileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("fileUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("newOrderId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("newOrderId");

                    b.ToTable("uploadFiles");
                });

            modelBuilder.Entity("User.Model.Values", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool?>("Accept")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("BrokerID")
                        .HasColumnType("longtext");

                    b.Property<string>("JopID")
                        .HasColumnType("longtext");

                    b.Property<double?>("Value")
                        .HasColumnType("double");

                    b.Property<int?>("newOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Accept")
                        .HasDatabaseName("IX_Values_Accept");

                    b.HasIndex("newOrderId")
                        .HasDatabaseName("IX_Values_NewOrderId");

                    b.ToTable("values");
                });

            modelBuilder.Entity("User.Model.NotesAccounting", b =>
                {
                    b.HasOne("User.Model.NewOrder", "newOrder")
                        .WithMany("notesAccountings")
                        .HasForeignKey("newOrderId");

                    b.Navigation("newOrder");
                });

            modelBuilder.Entity("User.Model.NotesCustomerService", b =>
                {
                    b.HasOne("User.Model.NewOrder", "newOrder")
                        .WithMany("NotesCustomerServices")
                        .HasForeignKey("newOrderId");

                    b.Navigation("newOrder");
                });

            modelBuilder.Entity("User.Model.NumberOfTypeOrder", b =>
                {
                    b.HasOne("User.Model.NewOrder", null)
                        .WithMany("numberOfTypeOrders")
                        .HasForeignKey("newOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("User.Model.UploadFile", b =>
                {
                    b.HasOne("User.Model.NewOrder", "newOrder")
                        .WithMany("uploadFiles")
                        .HasForeignKey("newOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("newOrder");
                });

            modelBuilder.Entity("User.Model.Values", b =>
                {
                    b.HasOne("User.Model.NewOrder", "newOrder")
                        .WithMany("values")
                        .HasForeignKey("newOrderId");

                    b.Navigation("newOrder");
                });

            modelBuilder.Entity("User.Model.NewOrder", b =>
                {
                    b.Navigation("NotesCustomerServices");

                    b.Navigation("notesAccountings");

                    b.Navigation("numberOfTypeOrders");

                    b.Navigation("uploadFiles");

                    b.Navigation("values");
                });
#pragma warning restore 612, 618
        }
    }
}
